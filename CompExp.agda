---------------------------------------------------------------------------------
-- This module contains the compiler and stack-machine for AbstractSyntax.agda --
-- authors: Matthew Thompson, Natalie Ravenhill, Yu-Yang Lin                   --
---------------------------------------------------------------------------------
module CompExp where

open import Data.Nat
open import Data.Bool renaming (Bool to ùîπ; _‚àß_ to oldand)
open import Data.List 
open import Data.Product
open import Relation.Binary.PropositionalEquality renaming ([_] to ‚ü™_‚ü´)
open import Data.Maybe
open import Data.String renaming (_++_ to _^_)

-- module imports for the compiler.
open import AbstractSyntax

-- INSTRUCTION SET FOR STACK MACHINE.
data instr : Set where
  Var  : String ‚Üí instr
  Val  : ‚Ñï ‚Üí instr
  Add  : instr
  Or   : instr
  Not  : instr
  Sub  : instr
  And  : instr
  Joz  : ‚Ñï ‚Üí instr
  Err  : instr

-- DEFINITIONS FOR THE STACK MACHINE.
program = List instr
stack   = List ‚Ñï
state   = String ‚Üí Maybe ‚Ñï 

-- Operation for natural numbers
notN : ‚Ñï -> ‚Ñï
notN zero = suc zero
notN (suc n) = zero

_andN_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero andN _ = zero
suc(_) andN m = m

_orN_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
_orN_ zero    n = n
_orN_ (suc n) _ = (suc n)

infixr 6 _andN_
infixr 5 _orN_

-- THIS IS THE STACK MACHINE, TRY NOT TO CHANGE IT.
‚ü®‚ü®_‚ü©‚ü©_,_,_ : program ‚Üí stack ‚Üí state ‚Üí ‚Ñï ‚Üí Maybe stack 
‚ü®‚ü® [] ‚ü©‚ü© s , _ , _                         = just s
‚ü®‚ü® _ ‚ü©‚ü© s , _ , zero                       = just s
‚ü®‚ü® Val x ‚à∑ p ‚ü©‚ü© s , œÉ , suc k              = ‚ü®‚ü® p ‚ü©‚ü© (x ‚à∑ s) , œÉ , k 
‚ü®‚ü® Var x ‚à∑ p ‚ü©‚ü© s , œÉ , suc k with œÉ x
...                            | just v  = ‚ü®‚ü® p ‚ü©‚ü© (v ‚à∑ s) , œÉ , k
...                            | nothing = nothing
‚ü®‚ü® Add ‚à∑ p ‚ü©‚ü© (m ‚à∑ n ‚à∑ s) , œÉ , suc k      = ‚ü®‚ü® p ‚ü©‚ü© (m + n ‚à∑ s) , œÉ , k
‚ü®‚ü® Sub ‚à∑ p ‚ü©‚ü© (m ‚à∑ n ‚à∑ s) , œÉ , suc k      = ‚ü®‚ü® p ‚ü©‚ü© (m ‚à∏ n ‚à∑ s) , œÉ , k
‚ü®‚ü® Not ‚à∑ p ‚ü©‚ü© (b ‚à∑ s)     , œÉ , suc k      = ‚ü®‚ü® p ‚ü©‚ü© (notN b ‚à∑ s) , œÉ , k
‚ü®‚ü® And ‚à∑ p ‚ü©‚ü© (m ‚à∑ n ‚à∑ s) , œÉ , suc k      = ‚ü®‚ü® p ‚ü©‚ü© (m andN n ‚à∑ s) , œÉ , k 
‚ü®‚ü® Or  ‚à∑ p ‚ü©‚ü© (m ‚à∑ n ‚à∑ s) , œÉ , suc k      = ‚ü®‚ü® p ‚ü©‚ü© ((m orN n) ‚à∑ s) , œÉ , k 
‚ü®‚ü® Joz n ‚à∑ p ‚ü©‚ü© (zero  ‚à∑ s) , œÉ , suc k    = ‚ü®‚ü® drop n p ‚ü©‚ü© s , œÉ , k
‚ü®‚ü® Joz _ ‚à∑ p ‚ü©‚ü© (suc _ ‚à∑ s) , œÉ , suc k    = ‚ü®‚ü® p ‚ü©‚ü© s , œÉ , k
‚ü®‚ü® _ ‚ü©‚ü© _ , _ , _ = nothing 


-- Compile takes an expression and returns a program (list of instructions).
compile : ‚àÄ {T} ‚Üí Exp T ‚Üí program
compile (N n)    = [ Val n ]
compile (V s)    = [ Var s ]
compile (E ‚äï E') = (compile E ++ compile E') ++ [ Add ]
compile (E ‚äù E') = (compile E ++ compile E') ++ [ Sub ]
compile ( ¬¨ E )  = compile E ++ [ Not ]
compile (E & E') = compile E ++ compile E' ++ [ And ]
compile (E ‚à• E') = compile E ++ compile E' ++ [ Or ]
compile (if E then E' else  E'') = e ++ [ Joz (length p') ] ++ p' ++ e ++ [ Not ] ++ [ Joz (length p'') ] ++ p''
    where
    e = compile E
    p' = compile E'
    p'' = compile E''
compile E        = [ Err ]

{-
Example
  << Val 1 ‚à∑ Val 1 ‚à∑ Add ‚à∑ Var "x" ‚à∑ Add ‚à∑ [] >> [] --->
  << Val 1 ‚à∑ Add ‚à∑ Var "x" ‚à∑ Add ‚à∑ [] >> [1] -->
  << Add ‚à∑ Var "x" ‚à∑ Add ‚à∑ [] >> [1::1] -->
  << Var "x" ‚à∑ Add ‚à∑ [] >> [2] -->
  << Add ‚à∑ [] >> [1::2] -->
  << [] >> [3] -->
  just [3]
-}
