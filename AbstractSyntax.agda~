--------------------------------------------------------------------
-- This module contains the Abstract Syntax for the stack-machine --
-- authors: Matthew Thompson, Natalie Ravenhill, Yu-Yang Lin      --
--------------------------------------------------------------------
module AbstractSyntax where

open import Data.Nat
open import Data.Bool renaming (Bool to ùîπ; _‚àß_ to oldand)
open import Data.List 
open import Data.Product
open import Relation.Binary.PropositionalEquality renaming ([_] to ‚ü™_‚ü´)
open import Data.Maybe
open import Data.String renaming (_++_ to _^_)

data Exp : (A : Set) ‚Üí Set where
  B   : ùîπ ‚Üí Exp ùîπ
  N   : ‚Ñï ‚Üí Exp ‚Ñï
  V   : String ‚Üí Exp ‚Ñï 
  _‚äï_ : Exp ‚Ñï ‚Üí Exp ‚Ñï ‚Üí Exp ‚Ñï
  _‚äù_ : Exp ‚Ñï ‚Üí Exp ‚Ñï ‚Üí Exp ‚Ñï 
-- 1. minus,
-- 2. and, or, not 
  ¬¨   : Exp ‚Ñï -> Exp ‚Ñï
  _&_   : Exp ‚Ñï -> Exp ‚Ñï -> Exp ‚Ñï
-- ‚â§ ‚â• =

  if_then_else : Exp ‚Ñï ‚Üí Exp ‚Ñï ‚Üí Exp ‚Ñï ‚Üí Exp ‚Ñï -- added by Matthew


-- 3. if then else, short-cut logical operators

-- 4. times, divide (short-cut?) ... we have no loops though! how would you extend the machine?
--           simple extension : more operations (boring)
--           complex extension : more control
infixl 5 _‚äï_
infixl 5 _‚äù_
